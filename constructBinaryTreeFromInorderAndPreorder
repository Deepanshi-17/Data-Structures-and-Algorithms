/*TC -> O(N)
SC -> O(N)
 */
class Solution {
public:
    TreeNode* fun(int startpre, int endpre, vector<int>& preorder, int startin, int endin, vector<int>& inorder, map<int,int>& mp)
    {
        if(startpre > endpre || startin > endin) return NULL;

        TreeNode* root = new TreeNode(preorder[startpre]);
        int rootposinorder = mp[preorder[startpre]];
        int numsleft = rootposinorder - startpre;
        root->left = fun(startpre + 1, startpre + numsleft, preorder, startin, rootposinorder - 1, inorder, mp);
        root->right = fun(startpre + numsleft + 1, endpre, preorder, rootposinorder + 1, endin, inorder, mp);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int,int>mp;
        for(int i = 0; i < inorder.size(); i++)
        {
            mp[inorder[i]] = i;
        }
        return fun(0, preorder.size()-1, preorder, 0, inorder.size()-1, inorder, mp);
    }
};
